generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  Session       Session[]
  Account       Account?

  todos         Todo[]
  simpleTodos   SimpleTodo[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@index([userId])
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

model Todo {
  id         String   @id @default(cuid())
  name       String
  color      String   @default("#000000")

  owner      User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId    String

  @@unique([name, ownerId])

  days       Day[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Day {
  id         String   @id @default(cuid())
  isDone     Boolean @default(false)

  todo       Todo @relation(fields: [todoId], references: [id], onDelete: Cascade)
  todoId     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SimpleTodo {
  id         String   @id @default(cuid())
  name       String

  owner      User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId    String

  @@unique([name, ownerId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}